<?php

use Proto\CS_Get_Password;
use \GatewayWorker\Lib\Gateway;
require_once __DIR__ . '/Proto/Autoloader.php';
//require_once './Proto/Proto/CS_Get_Password.php';
//require_once 'number_object_map.php';
function test_xxx($client_id,$phone)
{
    $test_phone =[

        15310998091=>1,
        15010203055=>1,
        15086766692=>1,
        15215231585=>1,
        15025383863=>1,
        18375737897=>1,
        13527459205=>1,
        15825968078=>1,
        13408402252=>1,
        13368126145=>1,
        13637731507=>1,
        18502389625=>1,
        17749962904=>1,
        19923867963=>1,
        15310982078=>1,
        18723223788=>1,
        13852066988=>1,
        13032333303=>1,
        15683608811=>1,
    ];
    if(!array_key_exists($phone,$test_phone))
    {
        send_notice_by_client_id($client_id,1,'服务器暂未开放！');
        return false;
    }
    return true;
}

function Blacklist($client_id,$phone)
{
    $blacklist_phone =[
        13353678694=>1,
        18632999313=>1,
        13160458027=>1,
        13016548154=>1,
        13236125494=>1,
        15631976281=>1,
        13353678924=>1,
        15501402731=>1,
        13004495731=>1,
        13056187446=>1,
        13290591878=>1,
        13131931392=>1,
        13046561731=>1,
        13179327824=>1,
        13046579714=>1,
        13353680684=>1,
        18617677183=>1,
        13024479475=>1,
        13353679076=>1,
        13179322954=>1,
        13092126924=>1,
        13229063821=>1,
        17551767524=>1,
        13353680387=>1,
        13046506507=>1,
        13182104573=>1,
        18617435736=>1,
        13092101541=>1,
        13046568071=>1,
        18617698717=>1,
        13236112394=>1,
        13092104091=>1,
        13353681504=>1,
        13046558644=>1,
        13231953998=>1,
        13056198946=>1,
        13004484169=>1,
        13353681547=>1,
        13292156923=>1,
        13046596754=>1,
        18617692150=>1,
        15632955097=>1,
        13064869353=>1,
        13225150384=>1,
        13353682028=>1,
        13056143305=>1,
        13056181427=>1,
        13231923283=>1,
        13353682454=>1,
        13092152324=>1,
        13046521435=>1,
        15630953572=>1,
        13064847636=>1,
        13353683403=>1,
        13092107419=>1,
        18531963871=>1,
        13046532142=>1,
        15613967063=>1,
        13046551504=>1,
        13353683347=>1,
        13092174204=>1,
        13046539075=>1,
        13024495634=>1,
        13236127144=>1,
        13290591089=>1,
        13353683493=>1,
        15695158354=>1,
        15501405761=>1,
        13102570602=>1,
        13046597514=>1,
        13353684275=>1,
        13172692053=>1,
        18632957395=>1,
        13236124873=>1,
        13353684351=>1,
        13102573828=>1,
        13046596834=>1,
        13024481423=>1,
        18617631527=>1,
        13353684549=>1,
        13046502417=>1,
        13092110984=>1,
        17551619254=>1,
        13353684623=>1,
        13046524590=>1,
        13046514950=>1,
        13064847794=>1,
        13064855907=>1,
        13064835102=>1,
        17551547943=>1,
        13353684611=>1,
        13056143713=>1,
        13276132744=>1,
        13353684741=>1,
        13231915729=>1,
        13046593570=>1,
        17605251041=>1,
        13353685264=>1,
        13229067073=>1,
        13032594248=>1,
        13353684778=>1,
        13046559374=>1,
        13092168794=>1,
        17625457485=>1,
        13056146737=>1,
        13353685394=>1,
        13179327754=>1,
        13273699729=>1,
        13016549850=>1,
        15630925167=>1,
        13174037290=>1,
        13353685438=>1,
        16651568924=>1,
        13102565316=>1,
        13092154324=>1,
        17551546301=>1,
        13236115304=>1,
        13064877981=>1,
        13016548750=>1,
        17626674251=>1,
        13160449714=>1,
        13236126451=>1,
        13353686084=>1,
        13160447562=>1,
        13064852762=>1,
        18617681293=>1,
        17551543950=>1,
        13353686324=>1,
        13046593627=>1,
        13046554013=>1,
        18632957956=>1,
        13016529545=>1,
        18617681703=>1,
        17551615964=>1,
        13179353994=>1,
        18662046224=>1,
        13353686138=>1,
        13102557822=>1,
        13046587284=>1,
        17625091641=>1,
        13102557313=>1,
        13046598404=>1,
        13046534374=>1,
        13353687470=>1,
        13092154604=>1,
        13179351364=>1,
        13353687291=>1,
        13046503246=>1,
        13115264267=>1,
        13046522692=>1,
        13222344941=>1,
        13046532043=>1,
        13032599734=>1,
        17551543057=>1,
        13064856332=>1,
        13353687254=>1,
        13092192644=>1,
        13102598972=>1,
        13056130245=>1,
        13046576283=>1,
        13064836817=>1,
        13064856271=>1,
        13160441137=>1,
        13046561162=>1,
        13064857950=>1,
        13230989653=>1,
        13092143057=>1,
        13064864053=>1,
        13292139206=>1,
        13064872215=>1,
        13092171544=>1,
        13092149324=>1,
        13064835067=>1,
        13004489447=>1,
        13179326394=>1,
        13160442453=>1,
        13046576894=>1,
        13046511583=>1,
        13225156247=>1,
        13004483894=>1,
        13046512483=>1,
        13046586064=>1,
        13160446562=>1,
        13046583782=>1,
        13353687823=>1,
        13046509127=>1,
        13172697653=>1,
        13016541291=>1,
        13353689486=>1,
        17551762804=>1,
        13293121569=>1,
        16651564292=>1,
        13353689146=>1,
        13016546707=>1,
        13290697351=>1,
        13024478217=>1,
        13290590509=>1,
        13024476965=>1,
        13046549320=>1,
        13353730539=>1,
        18617696059=>1,
        13046557814=>1,
        13064856334=>1,
        13353731049=>1,
        18694299925=>1,
        13160446797=>1,
        13131929079=>1,
        13353730843=>1,
        13160441369=>1,
        13046502315=>1,
        13229061721=>1,
        13353734127=>1,
        13046562540=>1,
        13160447971=>1,
        13229067900=>1,
        13353733597=>1,
        13016542807=>1,
        13231968029=>1,
        13353734144=>1,
        17551612674=>1,
        13273698823=>1,
        13353734294=>1,
        16651564744=>1,
        13229068905=>1,
        13160449790=>1,
        13046502073=>1,
        13353734272=>1,
        17551768354=>1,
        13179356484=>1,
        16651566475=>1,
        13229079630=>1,
        13353735159=>1,
        13236125934=>1,
        13024471334=>1,
        13353735770=>1,
        18617625692=>1,
        17551548237=>1,
        13353736714=>1,
        13102592232=>1,
        17605259401=>1,
        13353736445=>1,
        13293130782=>1,
        13174038751=>1,
        13353737734=>1,
        13290597392=>1,
        13064835810=>1,
        13353739410=>1,
        18632095672=>1,
        13236113974=>1,
        13353739748=>1,
        13102565801=>1,
        17551542490=>1,
        13290592526=>1,
        13353739943=>1,
        13236128446=>1,
        13131932559=>1,
        13373730447=>1,
        13046553294=>1,
        18617673828=>1,
        16651561954=>1,
        13373731420=>1,
        13223268752=>1,
        13046598517=>1,
        13373731579=>1,
        13230976182=>1,
        17551612174=>1,
        13373732639=>1,
        15532953922=>1,
        13179326914=>1,
        13373732745=>1,
        13046559134=>1,
        13373734914=>1,
        13064837164=>1,
        18632912695=>1,
        13032591164=>1,
        13373733574=>1,
        13290697559=>1,
        18651747260=>1,
        13373736147=>1,
        13016542169=>1,
        13373736397=>1,
        13046501931=>1,
        13373739045=>1,
        13046537406=>1,
        13373740498=>1,
        13236129564=>1,
        13373740186=>1,
        13222377494=>1,
        13373741458=>1,
        13276134574=>1,
        13064835071=>1,
        13064834102=>1,
        13231960538=>1,
        13046543647=>1,
        13290590921=>1,
        17551543231=>1,
        13064876314=>1,
        13373741681=>1,
        13004473893=>1,
        13046506492=>1,
        13373742412=>1,
        13046584353=>1,
        13046508694=>1,
        13373742801=>1,
        13046500745=>1,
        13016520468=>1,
        17551562694=>1,
        13286097719=>1,
        13373742910=>1,
        13016546582=>1,
        13196633767=>1,
        13373743384=>1,
        17551565034=>1,
        13222372524=>1,
        13373744142=>1,
        13092144934=>1,
        13230982715=>1,
        13373743664=>1,
        13179325704=>1,
        13024493026=>1,
        13373744181=>1,
        13046501924=>1,
        13160459497=>1,
        13174025162=>1,
        13046575463=>1,
        17551611645=>1,
        13102581357=>1,
        13046581504=>1,
        13102596129=>1,
        13046516905=>1,
        13373744528=>1,
        13131937011=>1,
        13046542149=>1,
        13092146134=>1,
        13373744197=>1,
        13276137204=>1,
        13231976237=>1,
        13046531615=>1,
        13290696505=>1,
        13046506384=>1,
        13024471610=>1,
        13236115604=>1,
        13160445913=>1,
        13004491294=>1,
        13292132805=>1,
        15612903653=>1,
        13276138374=>1,
        13270067431=>1,
        13225152347=>1,
        13160449269=>1,
        13092195404=>1,
        17551764310=>1,
        13230962837=>1,
        13292170182=>1,
        15501403815=>1,
        13004497473=>1,
        13160449824=>1,
        13174037705=>1,
        13102561073=>1,
        13102577283=>1,
        13046559837=>1,
        13160446691=>1,
        13046593253=>1,
        13064837901=>1,
        15501403259=>1,
        13046591084=>1,
        18632915807=>1,
        18632998773=>1,
        13160442092=>1,
        18617671003=>1,
        13046539747=>1,
        13293139506=>1,
        13046584253=>1,
        13092125428=>1,
        13064838715=>1,
        13292170275=>1,
        13046593585=>1,
        13046572410=>1,
        18617695787=>1,
        13046527496=>1,
        13102556501=>1,
        13179334756=>1,
        13024475216=>1,
        13056179854=>1,
        16630969989=>1,
        13179322476=>1,
        13064855719=>1,
        13174039237=>1,
        13222374974=>1,
        13003480119=>1,
        13024481254=>1,
        13064832752=>1,
        13046559364=>1,
        13064850716=>1,
        13004478141=>1,
        13004474090=>1,
        15501403837=>1,
        13004494457=>1,
        13046545772=>1,
        13064869545=>1,
        15613938095=>1,
        13016548121=>1,
        13223278129=>1,
        13046501474=>1,
        18633691255=>1,
        13046513905=>1,
        13102586361=>1,
        13179321544=>1,
        13236278144=>1,
        13046591739=>1,
        13292102690=>1,
        13373744673=>1,
        13160441275=>1,
        13231906157=>1,
        13046581574=>1,
        13231991383=>1,
        13373744679=>1,
        18651742551=>1,
        13092165425=>1,
        13222373574=>1,
        13373744753=>1,
        13092100384=>1,
        13115262074=>1,
        18662041402=>1,
        13373745419=>1,
        13016525497=>1,
        13046509357=>1,
        13373745450=>1,
        13064845804=>1,
        17551769354=>1,
        13004475234=>1,
        17626674157=>1,
        13231931330=>1,
        13046501184=>1,
        13131938561=>1,
        18651741591=>1,
        13016543104=>1,
        15631971953=>1,
        13046583429=>1,
        17551564302=>1,
        13236115874=>1,
        13102599637=>1,
        13046555174=>1,
        15531905176=>1,
        13004470780=>1,
        13046503230=>1,
        13064879492=>1,
        13179323574=>1,
        13046593394=>1,
        13064836694=>1,
        13046591290=>1,
        13056147594=>1,
        13292161071=>1,
        15613967853=>1,
        17551763410=>1,
        13046598974=>1,
        13046554041=>1,
        13229073870=>1,
        13056130924=>1,
        18617683750=>1,
        17551569147=>1,
        13223257551=>1,
        13229867685=>1,
        13290595339=>1,
        13290695090=>1,
        13292127931=>1,
        13273669585=>1,
        13273671827=>1,
        15613983167=>1,
        15530932973=>1,
        18617430283=>1,
        13131922753=>1,
        13292117160=>1,
        18633696907=>1,
        13230978533=>1,
        13092119249=>1,
        18633692830=>1,
        13046577693=>1,
        13064832881=>1,
        13016543226=>1,
        18617427973=>1,
        13981626009=>1,
        13102589271=>1,
        18531965972=>1,
        13016545601=>1,
        18531986325=>1,
        13064851294=>1,
        13160448759=>1,
        13046595114=>1,
        18633692067=>1,
        13004470654=>1,
        13229868935=>1,
        13276134064=>1,
        13064857206=>1,
        13056199464=>1,
        13373745684=>1,
        13064850514=>1,
        13373746054=>1,
        15501402091=>1,
        18632998796=>1,
        13373746420=>1,
        13230993297=>1,
        13373747644=>1,
        13064830873=>1,
        13373747224=>1,
        13273678106=>1,
        13373748413=>1,
        13092126014=>1,
        13373748469=>1,
        13016548083=>1,
        13373748498=>1,
        13056137147=>1,
        13160448780=>1,
        13373748732=>1,
        18617691683=>1,
        13373748524=>1,
        18633697256=>1,
        13016540087=>1,
        13373749203=>1,
        18617698580=>1,
        13373748754=>1,
        18632998772=>1,
        13373749430=>1,
        13236129854=>1,
        13373749478=>1,
        13290699816=>1,
        13373750173=>1,
        18617682279=>1,
        13373751015=>1,
        13131936972=>1,
        13231967980=>1,
        13373750346=>1,
        13229067312=>1,
        13373751194=>1,
        13024496851=>1,
        13373752317=>1,
        15613907903=>1,
        13373752498=>1,
        13292175701=>1,
        13373753317=>1,
        13290590697=>1,
        13373752924=>1,
        18531976653=>1,
        18652743826=>1,
        13131957052=>1,
        13373754027=>1,
        13191623795=>1,
        13223257820=>1,
        13373754359=>1,
        15934416631=>1,
        13292105075=>1,
        18632089233=>1,
        13290693659=>1,
        13373755341=>1,
        13373755047=>1,
        13373755604=>1,
        13373755841=>1,
        13231907626=>1,
        13373755994=>1,
        13021859087=>1,
        13373756247=>1,
        18617675180=>1,
        13373757140=>1,
        18632915775=>1,
        13091298190=>1,
        13373757463=>1,
        18633699791=>1,
        13373757514=>1,
        13211087326=>1,
        13373757934=>1,
        18617691958=>1,
        13373758075=>1,
        13102595725=>1,
        13373759115=>1,
        13290690357=>1,
        13160445801=>1,
        13373758471=>1,
        13004480043=>1,
        13373759694=>1,
        15531932739=>1,
        17551560943=>1,
        13373760425=>1,
        15613963502=>1,
        13373760324=>1,
        13191623992=>1,
        18531988162=>1,
        13092148504=>1,
        13373761252=>1,
        15531903771=>1,
        15632920597=>1,
        13373762384=>1,
        13046593479=>1,
        13046575167=>1,
        13292139657=>1,
        18632963220=>1,
        13046559283=>1,
        18617673177=>1,
        13290590578=>1,
        16651562994=>1,
        13172693250=>1,
        13046593594=>1,
        16651567564=>1,
        13160445587=>1,
        13046538427=>1,
        13004474196=>1,
        13174033917=>1,
        13223297293=>1,
        13092184324=>1,
        13276134049=>1,
        18617681705=>1,
        13056173824=>1,
        13229067135=>1,
        13179354704=>1,
        13160452490=>1,
        13273687308=>1,
        13046582435=>1,
        18617671651=>1,
        18617636183=>1,
        13222378734=>1,
        13064858192=>1,
        18617637503=>1,
        13046531670=>1,
        13046575874=>1,
        13292186275=>1,
        13292185026=>1,
        13276137324=>1,
        13092179041=>1,
        13273685105=>1,
        16651542170=>1,
        13004473264=>1,
        13231930587=>1,
        13056187894=>1,
        13004479584=>1,
        18694299872=>1,
        13102558318=>1,
        17551547503=>1,
        13231977389=>1,
        13046581262=>1,
        13046536851=>1,
        13229867315=>1,
        13016504930=>1,
        13179358746=>1,
        15531992236=>1,
        13004495437=>1,
        13064854147=>1,
        13102595916=>1,
        17625456701=>1,
        13056143684=>1,
        13179342584=>1,
        17626619749=>1,
        13230981362=>1,
        13174031927=>1,
        17551548734=>1,
        18617697639=>1,
        13046593047=>1,
        13229060176=>1,
        13223256051=>1,
        17551767724=>1,
        13102581987=>1,
        13046552674=>1,
        13231976291=>1,
        13016547062=>1,
        15613908793=>1,
        18633698637=>1,
        13236112724=>1,
        17551542704=>1,
        13273699532=>1,
        18631913951=>1,
        17551546847=>1,
        13182116094=>1,
        18632912820=>1,
        13222374942=>1,
        13046508374=>1,
        13046506864=>1,
        13160449610=>1,
        13179322614=>1,
        13218502934=>1,
        18632073006=>1,
        13229063763=>1,
        13046550454=>1,
        17501530449=>1,
        13290690532=>1,
        13046529035=>1,
        13102583987=>1,
        17551543047=>1,
        15530906791=>1,
        13092117554=>1,
        13024484614=>1,
        18617435829=>1,
        17551545397=>1,
        13046589735=>1,
        13373762416=>1,
        13180561502=>1,
        13056141894=>1,
        13236129794=>1,
        13046597102=>1,
        13102589727=>1,
        13186441042=>1,
        13373762441=>1,
        13004484372=>1,
        13046555249=>1,
        18617635791=>1,
        18633692082=>1,
        13046517927=>1,
        13191626007=>1,
        13046534256=>1,
        13046569276=>1,
        13046554174=>1,
        15630976359=>1,
        13373762493=>1,
        13046553937=>1,
        13064835983=>1,
        18632915918=>1,
        18651741720=>1,
        13373763039=>1,
        13046537291=>1,
        13186441039=>1,
        13046552774=>1,
        13373762594=>1,
        13292172265=>1,
        13064851882=>1,
        13064835093=>1,
        16651563041=>1,
        13102566758=>1,
        13373763481=>1,
        13016540381=>1,
        13046501562=>1,
        13046582304=>1,
        13191601821=>1,
        13064859637=>1,
        17551566452=>1,
        17551561473=>1,
        13373763512=>1,
        13091295620=>1,
        13024492344=>1,
        13225155794=>1,
        13064851542=>1,
        13373763617=>1,
        15530973860=>1,
        17551763479=>1,
        13286097257=>1,
        13046583684=>1,
        13046583864=>1,
        13373763891=>1,
        13102590331=>1,
        13064832314=>1,
        13046551064=>1,
        13064832953=>1,
        13270033214=>1,
        13373763850=>1,
        13236124425=>1,
        13046559740=>1,
        13092170154=>1,
        18617690373=>1,
        13373764032=>1,
        13046584854=>1,
        13236115104=>1,
        13024472304=>1,
        13046559154=>1,
        13046558634=>1,
        13046507124=>1,
        13373764812=>1,
        13024486481=>1,
        13276138394=>1,
        16651565340=>1,
        13373765416=>1,
        13056179614=>1,
        13016541575=>1,
        13046521383=>1,
        13373765534=>1,
        13064830605=>1,
        13056140749=>1,
        16651560437=>1,
        13373765914=>1,
        18632915715=>1,
        13003486427=>1,
        16651563746=>1,
        13092127749=>1,
        13092145071=>1,
        13373766086=>1,
        13056141250=>1,
        13131929726=>1,
        13046506249=>1,
        13373766424=>1,
        13046524147=>1,
        13191617858=>1,
        13046549545=>1,
        13373766142=>1,
        13231956250=>1,
        13046581873=>1,
        13373766409=>1,
        13102576875=>1,
        13056134894=>1,
        15605116014=>1,
        13290692825=>1,
        13373766494=>1,
        13056194054=>1,
        17551546737=>1,
        18617639875=>1,
        13222372434=>1,
        13373766545=>1,
        15501403587=>1,
        18617433976=>1,
        13046591217=>1,
        13373766496=>1,
        13064871224=>1,
        13102595612=>1,
        13056170544=>1,
        13236117344=>1,
        13373766934=>1,
        13230993027=>1,
        13046575915=>1,
        13373766705=>1,
        18694299915=>1,
        13023483017=>1,
        13004478624=>1,
        13046550534=>1,
        13293125563=>1,
        13373767150=>1,
        18632998762=>1,
        17551564921=>1,
        18617692128=>1,
        13373767639=>1,
        15605110554=>1,
        18617672902=>1,
        17551762445=>1,
        13032597914=>1,
        18651764693=>1,
        18632957752=>1,
        13373768117=>1,
        13046526752=>1,
        18617435731=>1,
        18632901827=>1,
        13179347573=>1,
        13174036073=>1,
        13373767794=>1,
        13046576427=>1,
        18617625197=>1,
        17551548542=>1,
        13064851084=>1,
        13276116344=>1,
        13373769412=>1,
        15613972851=>1,
        13179326104=>1,
        13092114629=>1,
        18651764301=>1,
        13179328764=>1,
        13290692907=>1,
        13046576149=>1,
        13023486157=>1,
        13270061504=>1,
        13056136496=>1,
        13191619956=>1,
        13373769247=>1,
        13056132143=>1,
        13046558014=>1,
        13004495348=>1,
        13273686391=>1,
        13373768194=>1,
        13236115174=>1,
        13046532763=>1,
        13292157075=>1,
        18617631700=>1,
        13236112964=>1,
        17626670431=>1,
        13092175964=>1,
        13231908102=>1,
        13046569807=>1,
        13056146545=>1,
        13046517341=>1,
        13064861673=>1,
        18617629651=>1,
        13383731408=>1,
        13160446517=>1,
        13046551724=>1,
        13236127304=>1,
        13172687196=>1,
        13092104263=>1,
        13383730149=>1,
        13046553349=>1,
        13064836913=>1,
        15530981715=>1,
        13225152634=>1,
        13383731474=>1,
        16651563294=>1,
        13174023072=>1,
        18617695157=>1,
        13092171394=>1,
        16651562412=>1,
        13016553294=>1,
        13092177764=>1,
        17551544257=>1,
        13383730848=>1,
        13179327354=>1,
        13016505764=>1,
        13131917527=>1,
        17551768340=>1,
        13383731487=>1,
        13236274234=>1,
        13225152874=>1,
        13191608509=>1,
        13046550584=>1,
        15630910932=>1,
        13046583934=>1,
        13383732084=>1,
        18531963975=>1,
        13032591834=>1,
        13229866725=>1,
        13046505324=>1,
        13064845213=>1,
        13102557936=>1,
        13276136074=>1,
        13046542249=>1,
        13383732265=>1,
        13230951029=>1,
        13004497451=>1,
        13046508647=>1,
        13092149446=>1,
        13292137930=>1,
        18694299913=>1,
        13046554354=>1,
        13191609692=>1,
        13229066931=>1,
        13046534846=>1,
        15632956255=>1,
        13046512214=>1,
        13286092182=>1,
        16651560485=>1,
        13383731647=>1,
        13160440396=>1,
        13046518213=>1,
        18633697860=>1,
        13046596025=>1,
        13383732442=>1,
        13064873414=>1,
        17551569543=>1,
        13056150904=>1,
        18632999526=>1,
        13383732547=>1,
        15501403572=>1,
        13179321401=>1,
        18617672808=>1,
        13046585044=>1,
        13046519253=>1,
        13290692532=>1,
        16605159785=>1,
        13046557764=>1,
        13383733672=>1,
        18632999826=>1,
        13046512142=>1,
        15530973559=>1,
        13179352894=>1,
        13174033587=>1,
        13231957062=>1,
        13064835783=>1,
        17551614701=>1,
        15530976790=>1,
        13160446410=>1,
        13046572483=>1,
        17551568451=>1,
        13383734171=>1,
        13276108414=>1,
        18556023742=>1,
        17551568247=>1,
        16651566471=>1,
        13103091015=>1,
        13092102434=>1,
        18580121555=>1,
    ];
    if(array_key_exists($phone,$blacklist_phone))
    {
        send_notice_by_client_id($client_id,1,'为了保证真实用户利益，请联系客户核对信息！');
        return true;
    }
    return false;
}

//接收用户消息
function message_switch($client_id,$mid,$data)
{
    global $init_user_config;
    //如果包id不存在,记录错误返回
//    if(!array_key_exists($mid,$number_object_map))
//    {
//        echo "client packet error!from ip:";
//        //echo "client packet error!from ip:". $connection->getRemoteIp() . "\n";
//        return;
//    }
    if($mid == 40000)
    {
        web_server_message_manager($data);
    }

//    if(array_key_exists($mid,$task_event_map))
//    {
//        task_manager($mid,$task_event_map[$mid],$data);
//        //echo "client packet error!from ip:". $connection->getRemoteIp() . "\n";
//    }
    //从消息获取到对象
    //$request_login_buf = new $number_object_map[$mid];
    //$request_login_buf->parseFromString(substr($data,8));
    //请求密码
    if($mid == 701)
    {
        echo "get password request!";
        //获取请求对象
        $cs_get_password = new CS_Get_Password();

        $cs_get_password->parseFromString($data);
        $phone = $cs_get_password->getPhone();
//
//        if(!test_xxx($client_id,$phone))
//        {
//            return;
//        }

        if(Blacklist($client_id,$phone))
        {
            return;
        }

        //是否新建用户
        $is_create_user = false;
        //获取用户密码
        $password = product_password();

        $xxxx=db_exist_user_info($phone);
        //新增用户uid
        if($xxxx==null)
        {
            //新增用户
            db_add_user_id($phone,$password);
            $new_user = db_exist_user_info($phone);
            $is_create_user=true;
            if(!isset($new_user['user_id']))
            {
                send_notice_by_client_id($client_id,1,'注册失败！error:1001');
                util_log("db_add_user fail!web注册失败!phone: $phone");
                return ;
            }
            $user = db_exist_user($phone);
            if(isset($user['uid'])&&$user['uid']!=null)
            {
                if(!db_delete_user($user['uid']))
                {
                    send_notice_by_client_id($client_id,1,'注册失败！error:1003');
                    util_log("db_add_user fail!游戏服务器注册失败!phone: $phone");
                    return ;
                }
            }
            if(!db_add_user($phone,(int)$new_user['user_id'],$password))
            {
                db_delete_user_id((int)$new_user['user_id']);
                send_notice_by_client_id($client_id,1,'注册失败！error:1002');
                util_log("db_add_user fail!!游戏服务器注册失败!phone: $phone");
                return ;
            }

        }
        else
        {

            $user = db_exist_user($phone);
            if(isset($user['uid'])&&$user['uid']!=null&&$user['uid']==$xxxx['user_id'])
            {
                db_update_password($phone,$password);

            }
            else
            {
                if(db_get_user_by_id($xxxx['user_id']))
                {
                    if(!db_delete_user($xxxx['user_id']))
                    {
                        send_notice_by_client_id($client_id,1,'注册失败！error:1006');
                        util_log("db_add_user fail!游戏服务器注册失败!phone: $phone");
                        return ;
                    }
                }
                if(isset($user['uid'])&&$user['uid']!=null&&$user['uid']!=$xxxx['user_id'])
                {
                    if(!db_delete_user($user['uid']))
                    {
                        send_notice_by_client_id($client_id,1,'注册失败！error:1007');
                        util_log("db_add_user fail!游戏服务器注册失败!phone: $phone");
                        return ;
                    }
                }
                //$xxx = db_exist_user_info($phone);
                if(!db_add_user($phone,(int)$xxxx['user_id'],$xxxx['user_passwd']))
                {
                    //db_delete_user_id((int)$xxx['user_id']);
                    send_notice_by_client_id($client_id,1,'注册失败！error:1004');
                    util_log("db_add_user fail!!游戏服务器注册失败!phone: $phone");
                    return ;
                }
                $password=$xxxx['user_passwd'];
            }
        }
        if(!isset($_SESSION['phone']))
        {
            // 保存当前手机号
            $_SESSION['phone'] = $phone;
        }
        send_pack_password($client_id,$phone,$password,$is_create_user);
        return;

    }
    if($mid==703)
    {
        echo "create user request!";
        $create_user = new \Proto\CS_Create_User();
        $create_user->parseFromString($data);
        $create_user_back = new \Proto\SC_Create_User_Back();

        $is_success =false;
        if(db_create_user($_SESSION['phone'],$create_user->getName(),(int)$create_user->getGender(),(int)$create_user->getConstellation())!=null)
        {
//            task_manager($mid);
            $is_success=true;
        }
        send_pack_create_user($client_id,$is_success);
        return;
    }
    if($mid==710)
    {

        echo "client login request!";
        //获取请求对象
        $cs_client_login = new \Proto\CS_Client_Login();
        $cs_client_login->parseFromString($data);

//        if(!test_xxx($client_id,$cs_client_login->getPhone()))
//        {
//            return;
//        }

        if(Blacklist($client_id,$cs_client_login->getPhone()))
        {
            return;
        }

        $get_user=db_get_user_by_verify($cs_client_login->getPhone(),$cs_client_login->getPassword());
        //var_dump($get_user);
        $is_success=false;
        if($get_user!=null)
        {
            $nowTime=date('Y-m-d h:i:s', time());
            //验证账号是否有问题
            $get_user_info=db_exist_user_info($cs_client_login->getPhone());
            if($get_user_info==null || $get_user_info['user_id']!=$get_user[0]['uid'])
            {
                if(!db_delete_user($get_user[0]['uid']))
                {
                    send_notice_by_client_id($client_id,1,'注册失败！error:1005');
                    util_log("db_add_user fail!游戏服务器注册失败!phone: ".$cs_client_login->getPhone());
                    return ;
                }
                return;
            }
            $is_success=true;
            if(!isset($_SESSION['uid']))
            {
                Gateway::bindUid($client_id,$get_user[0]['uid']);
                // 没验证的话把第一个包当做uid（这里为了方便演示，没做真正的验证）
                $_SESSION['uid'] = $get_user[0]['uid'];
                $_SESSION['phone'] = $cs_client_login->getPhone();
                $_SESSION['loginTime']=time();
                //添加相应数据到连接
                /* 保存uid到connection的映射，这样可以方便的通过uid查找connection，
                 * 实现针对特定uid推送数据
                 */
                //$tcp_worker->uidConnections[$connection->phone] = $connection;
            }
            //判断是否创建角色
            if($get_user[0]['name']==null)
            {
                send_pack_password($client_id,$cs_client_login->getPhone(),$cs_client_login->getPassword(),true);
                return;
            }
            //
            $uid=$_SESSION['uid'];
            //修改用户登陆时间信息
            $sql="update bolaik_user.user_info set login_time='$nowTime',rmb=1 where user_id=$uid";
            db_query($sql);
            $sql="insert into bolaik_user.user_stat_time(user_id) values($uid)";
            db_query($sql);
            //记录今日最高在线人数
            $date=date('Y-m-d', time());
            $time=date('h:i:s', time());
            $sql="select max_user from bolaik_user.user_online where date_time='$date'";
            $online=db_query($sql);
            $max=$online[0]['max_user'];
            global $connection_count;
            if($connection_count>$max){
                $sql="update bolaik_user.user_online set max_user= $connection_count,max_time='$time' where date_time='$date'";
                db_query($sql);
            }
        }
        send_pack_login($client_id,$is_success);
        return;
    }
    if($mid ==712)
    {
        $xiaotiao= new \Proto\SC_XinTiao();
        $xiaotiao->setDate(time());
        Gateway::sendToClient($client_id,my_pack(713,$xiaotiao->serializeToString()));
        return;
    }
    //如果用户id没设置
    if(!isset($_SESSION['uid']))
    {
        echo "without login message!";
        return;
    }
    //根据id对对象执行相应的行为
    switch ($mid)
    {
        //用户信息请求
        case 800:
            {
                echo "init user !";
                $user_info = db_get_user_info_by_uid($_SESSION['uid']);
                if($user_info==null)
                {
                    echo "get user error";
                    return;
                }
                $vip_day = 0;
                $user_info_vip = db_get_user_info_vip($_SESSION['uid']);
                if(isset($user_info_vip['vip_num'])&&$user_info_vip['vip_num']!=null&&$user_info_vip['vip_num']>0)
                {
                    $vip_day = $user_info_vip['vip_num'];
                }
                send_vip_day($_SESSION['uid'],$vip_day);
                //商城开关
                send_notice($_SESSION['uid'],4,$init_user_config['shangchengkaiguan']);
                //实名认证
                send_notice($_SESSION['uid'],5,$init_user_config['shimingkaiguan']);
                //h获取BU信息
                get_jinlian_assert($_SESSION['uid'],$_SESSION['phone']);
                //请求金lian
                //get_user_BU();
                //801基本信息
                send_pack_user_info($client_id,$user_info[0]);
                send_pack_task_reward($client_id);
                $user_info_bag = db_get_user_bag_info_by_uid($_SESSION['uid']);
                var_dump($user_info_bag);
                send_pack_user_bag_info($client_id,$user_info_bag[0]);
                //发送任务列表
                get_user_task_list($_SESSION['uid']);
                break;
            }
        //游戏完成
        case 807:
            {
                db_update_user_info_bAgent(true,$_SESSION['uid']);
                break;
            }
        case 900:
            {
                $play_game_result = new \Proto\CS_Game_Over_Score();
                $play_game_result->parseFromString($data);
                db_add_user_game_store($_SESSION['uid'],$play_game_result);
//                task_manager($mid);
                task_udpate_game($play_game_result,$_SESSION['uid']);
                break;
            }
        case 901:
            {
                //$object
                break;
            }
        case 1000:
            {
                $buy_item = new \Proto\CS_User_Use_Equip();
                $buy_item->parseFromString($data);
                $user_info_bag = db_get_user_bag_info_by_uid($_SESSION['uid']);
                $items = db_equip_item($_SESSION['uid'],$user_info_bag[0],$buy_item);
                if($items==null)
                {
                    echo "equip item error\n";
                }
                else
                {
                    send_pack_user_equip_item($client_id,$items);
                }
                return;
            }
        case 1002:
            {

                $buy_item = new \Proto\CS_User_Buy_Item();
                $buy_item->parseFromString($data);
                $user_info_bag = db_get_user_bag_info_by_uid($_SESSION['uid']);
                $items = db_buy_item($_SESSION['uid'],$user_info_bag[0],$buy_item);
                if($items==null)
                {
                    echo "bay error\n";
                }
                else
                {
                    send_pack_user_buy_item($client_id,$items);
                }
                return;
                break;
            }
        case 1004:
            {
                $buy_item = new \Proto\CS_User_Select_changjing();
                $buy_item->parseFromString($data);
                $user_info_bag = db_get_user_bag_info_by_uid($_SESSION['uid']);
                $items = db_equip_item_changjing($_SESSION['uid'],$user_info_bag[0],$buy_item);
                if($items==null)
                {
                    echo "equip item changjing error\n";
                }
                else
                {
                    send_pack_user_equip_item_changjing($client_id,$items);
                }
                break;
            }
        case 1006:
            {

                //用户是否以签到
                $get_sign = db_is_sign($_SESSION['uid']);
                if($get_sign['sign_date']==null)
                {

                    db_user_sign(true,$_SESSION['uid']);
                    send_pack_sign($client_id,1,false);

                    //任务处理
//                  task_manager($mid);
                    task_udpate_once($_SESSION['uid'],299999);

                    return;
                }
                if((intval(strtotime($get_sign['updated'])/86400))==intval(time()/86400))
                {
                    send_pack_sign($client_id,$get_sign['sign_date'],true);
                    return;
                }
                else
                {
                    db_user_sign(false,$_SESSION['uid']);
                    send_pack_sign($client_id,$get_sign['sign_date']%7+1,false);
                    //任务处理
                    //task_manager($mid);
                    task_udpate_once($_SESSION['uid'],299999);
                    return;
                }
                break;
            }
        case 1008:
            {
                $user_info_up = new \Proto\CS_User_Info_Update();
                $user_info_up->parseFromString($data);
                $is_success = true;
                if(db_update_user_info_some($_SESSION['uid'],$user_info_up->getName(),$user_info_up->getGender(),$user_info_up->getType())==null)
                {
                    $is_success=false;
                }
                send_pack_user_info_update($client_id,$is_success);
                return;
            }
        case 1010:
            {
                $user_info_up = new \Proto\CS_User_Real_Name();
                $user_info_up->parseFromString($data);
                $is_success = true;
                if(db_user_real_name($_SESSION['uid'],$user_info_up->getName(),$user_info_up->getCode())==null)
                {
                    $is_success=false;
                }
                else
                {
                  //  task_manager($mid);
                }
                db_user_update_bRealName($_SESSION['uid']);
                send_pack_user_real_name($client_id,$is_success);
                if($is_success){
                    task_udpate_once($_SESSION['uid'],300034);
                }
                return;
            }
        case 1012:
            {
                $user_info_up = new \Proto\CS_User_Bind_wx();
                $user_info_up->parseFromString($data);
                $is_success = true;
                if(db_user_bWx($_SESSION['uid'],$user_info_up->getOpenid(),$user_info_up->getUnionid())==null)
                {
                    $is_success=false;
                }
                db_user_update_bWx($_SESSION['uid']);
                send_pack_user_wx($client_id,$is_success);
                if($is_success){
                    task_udpate_once($_SESSION['uid'],300033);
                }
                return;
            }
        case 1015:
            {
                $user_info_up = new \Proto\CS_User_GPS();
                $user_info_up->parseFromString($data);
                db_store_user_gps($_SESSION['uid'],$user_info_up->getX(),$user_info_up->getY());
                break;
            }
        case 1017:
            {
                send_to_task_server(my_pack_with_uid(10056,$_SESSION['uid'],$data));
                break;
            }
        case 1019:
            {
                $bu_stream = new \Proto\CS_User_BU_Steam();
                $bu_stream->parseFromString($data);
                get_jinlian_liushui($_SESSION['uid'],$_SESSION['phone'],$bu_stream->getFlag(),$bu_stream->getDateFlag(),$bu_stream->getPage(),$bu_stream->getPageSize(),$bu_stream->getUnixTimestamp(),$bu_stream->getShowAll());
                break;
            }
                // case 1019:
        //     {
        //         get_user_task_list($_SESSION['uid']);
        //         break;
        //     }
        //绑定微信
        //修改名称 （更改用户信息）
        //实名认证 （是否实名认证）
        //换装 （用户装备列表）(一般频繁)（buff和记录）
        //换背景 （）（一般频繁）(buff和记录)
        //购买装备（）（buff和表）
        //购买背景（） （buff和表）
        //游戏结束（）
        //公告（）

    }

}
//消息转发
function on_task_server_message_switch($packet)
{

    $len = unpack('I*',substr($packet,0,4))[1]-12;
    $midArry = unpack('I*',substr($packet,4,4));
    $uid = unpack('P*',substr($packet,12,8))[1];
    $data = substr($packet,20);
    echo  $uid;
    echo "\n";
    switch ($midArry[1])
    {
        case 288:
            {
                if(Gateway::isUidOnline($uid))
                {
                    task_nianbao_send($packet,803);
                }
                break;
            }
        case 289:
            {
                if(Gateway::isUidOnline($uid))
                {
                    task_nianbao_send($packet,1016);
                }
                break;
            }
        case 290:
            {
                if(Gateway::isUidOnline($uid))
                {
                    task_nianbao_send($packet,1018);
                }
                break;
            }
    }
}
function task_nianbao_send($packet,$mid)
{
    $len_packet = strlen($packet);
    $len = unpack('I*',substr($packet,0,4))[1];
    $midArry = unpack('I*',substr($packet,4,4));
    $uid = unpack('P*',substr($packet,12,8))[1];

    while ($len_packet>=$len)
    {
        //解析包
        $data = substr($packet,20,$len-20);
        Gateway::sendToUid($uid,my_pack_with_len($len-12,$mid,$data));
        //剩余包
        $packet = substr($packet,$len);
        if($packet ==null)
        {
            break;
        }
        $len = unpack('I*',substr($packet,0,4))[1];
        $len_packet=$len_packet-$len;
    }
}
function product_uid()
{
    //return uniqid('', true);
    global $tcp_worker;
    $current_time= time();
    $header=(int)$tcp_worker->id;//5个字节
    $middle=$current_time-1557659984;//29位 ，100年左右
    $end=$tcp_worker->product_uid_count;//序号10位
    $tcp_worker->product_uid_count++;
    if($tcp_worker->product_uid_count>1024)
    {
        $tcp_worker->product_uid_count=0;
    }
    return $header<<39|$middle<<10|$end;
}
function product_password()
{
    return intval((microtime(true)*1000));
}